/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import java.util.List;
import io.swagger.model.Sede;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-08-08T15:00:25.418Z")

@Api(value = "sede", description = "the sede API")
public interface SedeApi {

    @ApiOperation(value = "añadir una nueva sede", nickname = "addSede", notes = "", tags={ "sede", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 405, message = "Entrada invalida") })
    @RequestMapping(value = "/sede",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addSede(@ApiParam(value = "Objeto sede que debe agregarse a la base" ,required=true )  @Valid @RequestBody Sede body);


    @ApiOperation(value = "Crear lista de sedes con un arreglo dado", nickname = "createSedeWithArrayInput", notes = "", tags={ "sede", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Operacion Exitosa") })
    @RequestMapping(value = "/sede/createWithArray",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> createSedeWithArrayInput(@ApiParam(value = "Lista de sedes " ,required=true )  @Valid @RequestBody List<Sede> body);


    @ApiOperation(value = "Eliminar sede", nickname = "deleteSedeId", notes = "", tags={ "sede", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 404, message = "Sede no encontrada") })
    @RequestMapping(value = "/sede/{sedename}/{id}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteSedeId(@ApiParam(value = "Sede a ser eliminada",required=true) @PathVariable("sedename") String sedename, @PathVariable("id") long id);


    @ApiOperation(value = "Obtener sede por nombre y Id ", nickname = "getSedeByName", notes = "", response = Sede.class, tags={ "sede", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Operacion Exitosa", response = Sede.class),
        @ApiResponse(code = 400, message = "Sede Invalida"),
        @ApiResponse(code = 404, message = "sede no encontrada") })
    //@CrossOrigin(origins = "http://localhost:4200")
    @RequestMapping(value = "/sede/{sedename}/{id}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<Sede> getSedeByName(@ApiParam(value = "El nombre necesario para hacer la busqueda",required=true) @PathVariable("sedename") String sedename, @PathVariable("id") long id );

    //Obtener todas las sedes
    @ApiOperation(value = "Obtener todas las sedes ", nickname = "getSedes", notes = "", response = Sede.class, tags={ "sede", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Operacion Exitosa", response = Sede.class),
        @ApiResponse(code = 400, message = "Operacion invalida")})
    @RequestMapping(value = "/sede",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Sede>> getSedes();
   
    
    

    @ApiOperation(value = "Actualizar una sede existente", nickname = "updateSede", notes = "", tags={ "sede", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 405, message = "Entrada invalida") })
    @RequestMapping(value = "/sede/{id}",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateSede(@ApiParam(value = "id de la sede a actualizar",required=true) @PathVariable("id") long id,@ApiParam(value = "Objeto sede necesario para añadir a la base" ,required=true )  @Valid @RequestBody Sede body);

}
