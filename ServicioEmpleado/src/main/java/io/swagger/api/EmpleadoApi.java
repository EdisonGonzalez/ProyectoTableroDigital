/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Empleado;
import java.util.List;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-08-08T16:20:10.585Z")

@Api(value = "empleado", description = "the empleado API")
public interface EmpleadoApi {

    @ApiOperation(value = "Actualizar empleado", nickname = "actualizarEmpleado", notes = "Esto solo puede hacerlo el empleado conectado", tags={ "empleado", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Empleado invalido suministrado"),
        @ApiResponse(code = 404, message = "empleado no encontrado") })
    @RequestMapping(value = "/empleado/{nombreEmpleado}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> actualizarEmpleado(@ApiParam(value = "Nombre que necesita ser actualizado",required=true) @PathVariable("nombreEmpleado") String nombreEmpleado,@ApiParam(value = "Objeto empleado actualizado" ,required=true )  @Valid @RequestBody Empleado cuerpo);


    @ApiOperation(value = "Crear Empleado", nickname = "crearEmpleado", notes = "Esto solo puede hacerlo el empleado conectado", tags={ "empleado", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Operacion Exitosa") })
    @RequestMapping(value = "/empleado",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> crearEmpleado(@ApiParam(value = "Objeto empleado creado" ,required=true )  @Valid @RequestBody Empleado cuerpo);


    @ApiOperation(value = "Crea una lista de empleados con una matriz de entrada determinada", nickname = "crearEmpleadosConArregloEntrada", notes = "", tags={ "empleado", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Operacion Exitosa") })
    @RequestMapping(value = "/empleado/crearConArreglo",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> crearEmpleadosConArregloEntrada(@ApiParam(value = "Lista de objeto empleado" ,required=true )  @Valid @RequestBody List<Empleado> cuerpo);


    @ApiOperation(value = "Eliminar empleado", nickname = "eliminarEmpleado", notes = "Esto solo puede hacerlo el empleado conectado.", tags={ "empleado", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "El nombreEmpleado no es v√°lido"),
        @ApiResponse(code = 404, message = "empleado no encontrado") })
    @RequestMapping(value = "/empleado/{nombreEmpleado}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> eliminarEmpleado(@ApiParam(value = "El nombre que debe borrarse",required=true) @PathVariable("nombreEmpleado") String nombreEmpleado);


    @ApiOperation(value = "Obtener empleado por nombre de empleado", nickname = "obtenerEmpleadoPorNombre", notes = "", response = Empleado.class, tags={ "empleado", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Operacion Exitosa", response = Empleado.class),
        @ApiResponse(code = 400, message = "El nombreEmpleado no es valido"),
        @ApiResponse(code = 404, message = "empleado no encontrado") })
    @RequestMapping(value = "/empleado/{nombreEmpleado}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Empleado> obtenerEmpleadoPorNombre(@ApiParam(value = "El nombre que debe buscarse. Usar empleado1 para probar.",required=true) @PathVariable("nombreEmpleado") String nombreEmpleado);

}
